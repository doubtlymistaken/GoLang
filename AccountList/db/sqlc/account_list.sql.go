// Code generated by sqlc. DO NOT EDIT.
// source: account_list.sql

package db

import (
	"context"
	"database/sql"
)

const createAccountList = `-- name: CreateAccountList :execresult
INSERT INTO account_list (
  name, account_number, product_type, account_type , bank , currency, account_type_code, is_default, created_at
) VALUES (
  $1,$2,$3,$4,$5,$6,$7,$8,$9
)
`

func (q *Queries) CreateAccountList(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccountList)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account_list
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAccount)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, account_number, product_type, account_type, bank, currency, account_type_code, is_default, created_at FROM account_list
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context) (AccountList, error) {
	row := q.db.QueryRowContext(ctx, getAccount)
	var i AccountList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountNumber,
		&i.ProductType,
		&i.AccountType,
		&i.Bank,
		&i.Currency,
		&i.AccountTypeCode,
		&i.IsDefault,
		&i.CreatedAt,
	)
	return i, err
}

const listAccountList = `-- name: ListAccountList :many
SELECT id, name, account_number, product_type, account_type, bank, currency, account_type_code, is_default, created_at FROM account_list
ORDER BY id
`

func (q *Queries) ListAccountList(ctx context.Context) ([]AccountList, error) {
	rows, err := q.db.QueryContext(ctx, listAccountList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountList
	for rows.Next() {
		var i AccountList
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccountNumber,
			&i.ProductType,
			&i.AccountType,
			&i.Bank,
			&i.Currency,
			&i.AccountTypeCode,
			&i.IsDefault,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountDefaultAccount = `-- name: UpdateAccountDefaultAccount :exec
UPDATE account_list SET is_default = $2
WHERE id = $1
`

func (q *Queries) UpdateAccountDefaultAccount(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateAccountDefaultAccount)
	return err
}
